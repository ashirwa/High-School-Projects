## 
## *************************************************** 
## Adam Shirwa (20941437) 
## CS116 Winter 2024 
## Assignment 02 , Problem 1
## *************************************************** ##


import check

def is_right_angle(x1, y1, x2, y2, x3, y3):
  ''' 
  is_right_angle (x1, y1, x2, y2, x3, y3) returns True if the triangle based on
  the pythagoram theorem is right_angled, and False otherwise. 
  
  is_right_angle: Num Num Num Num Num Num -> Bool
  
  '''
  # Calculate the squares of distances between the points
  side1_sq = (x2 - x1)**2 + (y2 - y1)**2
  side2_sq = (x3 - x2)**2 + (y3 - y2)**2
  side3_sq = (x3 - x1)**2 + (y3 - y1)**2

  # Identify the longest side
  max_side = max(side1_sq, side2_sq, side3_sq)

  # Check if the triangle satisfies the Pythagorean theorem
  return max_side == side1_sq + side2_sq + side3_sq - max_side


check.expect("Test 1", is_right_angle(0, 0, 0, 3, 4, 0), True)
check.expect("Test 2", is_right_angle(-3, 0, 0, 4, 4, 0),  False)
check.expect("Test 3", is_right_angle(1, 2, 4, 6, 8, 10), False)
check.expect("Test 4", is_right_angle(-1, 0, 2, 3, 4, 6), False)



## *************************************************** 
## 
## *************************************************** 
## Adam Shirwa (20941437) 
## CS116 Winter 2024 
## Assignment 02 , Problem 2
## *************************************************** ##
import check

def full_isbn(n):
    """
    full_isbn(n) returns the 13th value based off the calculation of
    odd + even numbers * 3 % 10  and adds the resulting value at the end
    
    full_isbn: Num -> Num
    
    Requires:
    n is a 12-digit number
    """
    n_str = str(n)

    # Function to calculate the checksum
    def calculate_checksum(pos, total_odd, total_even):
        '''
        calculate_checksum(pos, total_odd, total_even) calculates sum of numbers
        '''
        if pos >= len(n_str):
            return (total_odd + 3 * total_even) % 10
        else:
            digit = int(n_str[pos])
            if pos % 2 == 0:
                return calculate_checksum(pos + 1, total_odd + digit, total_even)
            else:
                return calculate_checksum(pos + 1, total_odd, total_even + digit)

    checksum = calculate_checksum(0, 0, 0)

    full_isbn = int(n_str + str(checksum))

    return full_isbn


check.expect("Test 1", full_isbn(567856785678), 5678567856782)
check.expect("Test 2", full_isbn(123456789012), 1234567890127)
check.expect("Test 3", full_isbn(111122223333), 1111222233339)



## *************************************************** 

## 
## *************************************************** 
## Adam Shirwa (20941437) 
## CS116 Winter 2024 
## Assignment 02 , Problem 3
## *************************************************** ##

import check

def is_prime(num):
    '''
    is_prime(num) checks if a given number "num" is prime
    '''
    if num < 2:
        return False
    elif num == 2:
        return True
    elif num % 2 == 0:
        return False
    return is_prime_recursive(num, 3)

def is_prime_recursive(num, divisor):
    '''
    is_prime_recursive(num, divisor) checks if num is divisible by an odd number 
    from 3 up to the square root of "num"
    '''
    if divisor * divisor > num:
        return True
    elif num % divisor == 0:
        return False
    else:
        return is_prime_recursive(num, divisor + 2)

def prime_factors_count(x):
    '''
    prime_factors_count(x) returns the number of prime factors of n
    
    prime_factors_count: Num -> Num
    
    Requires: x <= 100
    '''
    def count_factors_recursive(n, divisor):
        '''
        count_factors_recursive(n, divisor) recurses by dividing n 
        by the smallest prime divisor
        '''
        if n == 1:
            return 0
        elif n % divisor == 0 and is_prime(divisor):
            return 1 + count_factors_recursive(n // divisor, divisor)
        else:
            return count_factors_recursive(n, divisor + 1)

    return count_factors_recursive(x, 2)

# Test cases
check.expect("Test 1", prime_factors_count(64), 1)
check.expect("Test 2", prime_factors_count(27), 3)
check.expect("Test 3", prime_factors_count(37), 1)
